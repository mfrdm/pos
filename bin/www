#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('erp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server)

var list = []
io.on('connection', function(socket){
  console.log('a user connected with id: '+socket.id);
  var userId = socket.id;
  var dict = {}
  dict.userId = socket.id;
  dict.username = 'Anonymous'
  list.push(dict)

  socket.on('chat message', function(msg){
    console.log(msg.receiver)
    var receiver = list.filter(function(ele){
      if(ele.username == msg.receiver){
        return ele.userId
      }
    });
    if(receiver.length != 0){
      console.log(receiver[0].userId)
      socket.broadcast.to(receiver[0].userId).emit('message',msg.username+'   says:   '+msg.msg);
    }


  socket.emit('online', list)
  });

socket.on('register', function(msg){
    if(msg.username != ''){
        console.log(msg.username)
        list.map(function(ele){
        if(ele.userId == socket.id){
        return ele.username = msg.username
        }else{
        return ele.username
        }
        })
    }
    console.log(list)
    socket.emit('online', list)
})

socket.on('disconnect', function(){
    console.log('user disconnected');
    list = list.filter(function(id){
    return id.userId != socket.id
})
socket.emit('online', list)
});
socket.emit('online', list)
    console.log(list)
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}